/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ProtectedLayoutImport } from "./routes/_protected/layout";
import { Route as AuthLayoutImport } from "./routes/_auth/layout";
import { Route as AuthIndexImport } from "./routes/_auth/index";
import { Route as ProtectedSchedulesImport } from "./routes/_protected/schedules";
import { Route as ProtectedPlansImport } from "./routes/_protected/plans";
import { Route as ProtectedOverviewImport } from "./routes/_protected/overview";
import { Route as AuthRegisterImport } from "./routes/_auth/register";
import { Route as ProtectedFriendsFriendIdImport } from "./routes/_protected/friends.$friendId";

// Create/Update Routes

const ProtectedLayoutRoute = ProtectedLayoutImport.update({
  id: "/_protected",
  getParentRoute: () => rootRoute,
} as any);

const AuthLayoutRoute = AuthLayoutImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthLayoutRoute,
} as any);

const ProtectedSchedulesRoute = ProtectedSchedulesImport.update({
  id: "/schedules",
  path: "/schedules",
  getParentRoute: () => ProtectedLayoutRoute,
} as any);

const ProtectedPlansRoute = ProtectedPlansImport.update({
  id: "/plans",
  path: "/plans",
  getParentRoute: () => ProtectedLayoutRoute,
} as any);

const ProtectedOverviewRoute = ProtectedOverviewImport.update({
  id: "/overview",
  path: "/overview",
  getParentRoute: () => ProtectedLayoutRoute,
} as any);

const AuthRegisterRoute = AuthRegisterImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => AuthLayoutRoute,
} as any);

const ProtectedFriendsFriendIdRoute = ProtectedFriendsFriendIdImport.update({
  id: "/friends/$friendId",
  path: "/friends/$friendId",
  getParentRoute: () => ProtectedLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthLayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/_protected": {
      id: "/_protected";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof ProtectedLayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/register": {
      id: "/_auth/register";
      path: "/register";
      fullPath: "/register";
      preLoaderRoute: typeof AuthRegisterImport;
      parentRoute: typeof AuthLayoutImport;
    };
    "/_protected/overview": {
      id: "/_protected/overview";
      path: "/overview";
      fullPath: "/overview";
      preLoaderRoute: typeof ProtectedOverviewImport;
      parentRoute: typeof ProtectedLayoutImport;
    };
    "/_protected/plans": {
      id: "/_protected/plans";
      path: "/plans";
      fullPath: "/plans";
      preLoaderRoute: typeof ProtectedPlansImport;
      parentRoute: typeof ProtectedLayoutImport;
    };
    "/_protected/schedules": {
      id: "/_protected/schedules";
      path: "/schedules";
      fullPath: "/schedules";
      preLoaderRoute: typeof ProtectedSchedulesImport;
      parentRoute: typeof ProtectedLayoutImport;
    };
    "/_auth/": {
      id: "/_auth/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof AuthLayoutImport;
    };
    "/_protected/friends/$friendId": {
      id: "/_protected/friends/$friendId";
      path: "/friends/$friendId";
      fullPath: "/friends/$friendId";
      preLoaderRoute: typeof ProtectedFriendsFriendIdImport;
      parentRoute: typeof ProtectedLayoutImport;
    };
  }
}

// Create and export the route tree

interface AuthLayoutRouteChildren {
  AuthRegisterRoute: typeof AuthRegisterRoute;
  AuthIndexRoute: typeof AuthIndexRoute;
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthRegisterRoute: AuthRegisterRoute,
  AuthIndexRoute: AuthIndexRoute,
};

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
);

interface ProtectedLayoutRouteChildren {
  ProtectedOverviewRoute: typeof ProtectedOverviewRoute;
  ProtectedPlansRoute: typeof ProtectedPlansRoute;
  ProtectedSchedulesRoute: typeof ProtectedSchedulesRoute;
  ProtectedFriendsFriendIdRoute: typeof ProtectedFriendsFriendIdRoute;
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedOverviewRoute: ProtectedOverviewRoute,
  ProtectedPlansRoute: ProtectedPlansRoute,
  ProtectedSchedulesRoute: ProtectedSchedulesRoute,
  ProtectedFriendsFriendIdRoute: ProtectedFriendsFriendIdRoute,
};

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
);

export interface FileRoutesByFullPath {
  "": typeof ProtectedLayoutRouteWithChildren;
  "/register": typeof AuthRegisterRoute;
  "/overview": typeof ProtectedOverviewRoute;
  "/plans": typeof ProtectedPlansRoute;
  "/schedules": typeof ProtectedSchedulesRoute;
  "/": typeof AuthIndexRoute;
  "/friends/$friendId": typeof ProtectedFriendsFriendIdRoute;
}

export interface FileRoutesByTo {
  "": typeof ProtectedLayoutRouteWithChildren;
  "/register": typeof AuthRegisterRoute;
  "/overview": typeof ProtectedOverviewRoute;
  "/plans": typeof ProtectedPlansRoute;
  "/schedules": typeof ProtectedSchedulesRoute;
  "/": typeof AuthIndexRoute;
  "/friends/$friendId": typeof ProtectedFriendsFriendIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_auth": typeof AuthLayoutRouteWithChildren;
  "/_protected": typeof ProtectedLayoutRouteWithChildren;
  "/_auth/register": typeof AuthRegisterRoute;
  "/_protected/overview": typeof ProtectedOverviewRoute;
  "/_protected/plans": typeof ProtectedPlansRoute;
  "/_protected/schedules": typeof ProtectedSchedulesRoute;
  "/_auth/": typeof AuthIndexRoute;
  "/_protected/friends/$friendId": typeof ProtectedFriendsFriendIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/register"
    | "/overview"
    | "/plans"
    | "/schedules"
    | "/"
    | "/friends/$friendId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | ""
    | "/register"
    | "/overview"
    | "/plans"
    | "/schedules"
    | "/"
    | "/friends/$friendId";
  id:
    | "__root__"
    | "/_auth"
    | "/_protected"
    | "/_auth/register"
    | "/_protected/overview"
    | "/_protected/plans"
    | "/_protected/schedules"
    | "/_auth/"
    | "/_protected/friends/$friendId";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren;
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_protected"
      ]
    },
    "/_auth": {
      "filePath": "_auth/layout.tsx",
      "children": [
        "/_auth/register",
        "/_auth/"
      ]
    },
    "/_protected": {
      "filePath": "_protected/layout.tsx",
      "children": [
        "/_protected/overview",
        "/_protected/plans",
        "/_protected/schedules",
        "/_protected/friends/$friendId"
      ]
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_protected/overview": {
      "filePath": "_protected/overview.tsx",
      "parent": "/_protected"
    },
    "/_protected/plans": {
      "filePath": "_protected/plans.tsx",
      "parent": "/_protected"
    },
    "/_protected/schedules": {
      "filePath": "_protected/schedules.tsx",
      "parent": "/_protected"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/_protected/friends/$friendId": {
      "filePath": "_protected/friends.$friendId.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
